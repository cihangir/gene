{
    "$schema": "http://json-schema.org/draft-04/schema#",
    "type": "object",
    "title": "Twitter",
    "description": "Twitter is a sample application contract.",
    "generators": [
        {
            "sql-definition": {
                "roleName": "twitter_db_role",
                "grants": [
                    "SELECT",
                    "INSERT",
                    "DELETE"
                ],
                "databaseName": "twitter_db",
                "schemaName": "account"
            }
        }
    ],
    "definitions": {
        "Config": {
            "type": "config",
            "title": "Config",
            "description": "Config represents the required options for this module to work",
            "definitions": {},
            "properties": {
                "Postgres": {
                    "type": "object",
                    "title": "Postgres",
                    "description": "Postgres holds the all credentials for postgres db connection.",
                    "properties": {
                        "Port": {
                            "description": "The port number for postgres config",
                            "type": "number",
                            "format": "int64",
                            "minimum": 1024
                        },
                        "Host": {
                            "description": "Host holds the hostname for the postgres",
                            "type": "string",
                            "minLength": 4,
                            "maxLength": 24
                        },
                        "Username": {
                            "description": "Username holds the username for the postgres",
                            "type": "string",
                            "minLength": 4,
                            "maxLength": 24
                        },
                        "Password": {
                            "description": "Password holds the password for the postgres",
                            "type": "string",
                            "minLength": 4,
                            "maxLength": 24
                        },
                        "DBName": {
                            "description": "DBName holds the database name for the postgres",
                            "type": "string",
                            "minLength": 4,
                            "maxLength": 24
                        }
                    },
                    "definitions": {}
                }
            }
        },
        "Profile": {
            "type": "object",
            "title": "Profile",
            "description": "Profile represents a registered Account's Public Info",
            "generators": [
                {
                    "sql-definition": {
                        "grants": [
                            "SELECT",
                            "INSERT",
                            "DELETE"
                        ],
                        "primaryKey": [
                            "Id"
                        ]
                    }
                }
            ],
            "properties": {
                "Id": {
                    "description": "The unique identifier for a Account's Profile",
                    "type": "number",
                    "format": "int64",
                    "minimum": 1,
                    "propertyOrder": 10
                },
                "ScreenName": {
                    "description": "Full name associated with the profile. Maximum of 20 characters.",
                    "type": "string",
                    "minLength": 4,
                    "maxLength": 20,
                    "propertyOrder": 20
                },
                "URL": {
                    "description": "URL associated with the profile. Will be prepended with “http://” if not present. Maximum of 100 characters.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 100,
                    "propertyOrder": 30
                },
                "Location": {
                    "description": "The city or country describing where the user of the account is located. The contents are not normalized or geocoded in any way. Maximum of 30 characters.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 30,
                    "propertyOrder": 40
                },
                "Description": {
                    "description": "A description of the user owning the account. Maximum of 160 characters.",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 160,
                    "propertyOrder": 50
                },
                "LinkColor": {
                    "description": "Sets a hex value that controls the color scheme of links used on the authenticating user’s profile page on twitter.com. This must be a valid hexadecimal value, and may be either three or six characters (ex: F00 or FF0000).",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 6,
                    "default": "FF0000",
                    "propertyOrder": 60
                },
                "AvatarURL": {
                    "description": "URL of the Account's Avatar",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 2000,
                    "propertyOrder": 70
                },
                "CreatedAt": {
                    "description": "Profile's creation time",
                    "type": "string",
                    "format": "date-time",
                    "default": "now()",
                    "propertyOrder": 80
                }
            },
            "required": [
                "ScreenName"
            ],
            "functions": {
                "One": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                },
                "Create": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                },
                "Update": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                },
                "Delete": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                }
            }
        },
        "Account": {
            "type": "object",
            "title": "Account",
            "description": "Account represents a registered User",
            "generators": [
                {
                    "sql-definition": {
                        "grants": [
                            "SELECT",
                            "INSERT",
                            "DELETE"
                        ],
                        "primaryKey": [
                            "Id"
                        ],
                        "uniqueKeys": [
                            [ "Id" ],
                            [ "URL" ]
                        ],
                        "foreignKeys": [
                            ["ProfileId", "Account.Profile.Id"]
                        ]
                    }
                }
            ],
            "properties": {
                "Id": {
                    "description": "The unique identifier for a Account",
                    "type": "number",
                    "format": "int64",
                    "minimum": 1,
                    "propertyOrder": 10
                },
                "ProfileId": {
                    "description": "The unique identifier for a Account's Profile",
                    "type": "number",
                    "format": "int64",
                    "minimum": 1,
                    "propertyOrder": 20
                },
                "Password": {
                    "description": "Salted Password of the Account",
                    "type": "string",
                    "minLength": 6,
                    "propertyOrder": 30
                },
                "URL": {
                    "description": "Unique URL of the Account",
                    "type": "string",
                    "minLength": 6,
                    "propertyOrder": 40
                },
                "PasswordStatusConstant": {
                    "description": "Status of the Account's Password",
                    "type": "string",
                    "enum": [
                        "valid",
                        "needsReset",
                        "generated"
                    ],
                    "default": "valid",
                    "propertyOrder": 50
                },
                "Salt": {
                    "description": "Salt used to hash Password of the Account",
                    "type": "string",
                    "minLength": 0,
                    "maxLength": 255,
                    "propertyOrder": 60
                },
                "EmailAddress": {
                    "description": "Email Address of the Account",
                    "type": "string",
                    "format": "email",
                    "propertyOrder": 70
                },
                "EmailStatusConstant": {
                    "description": "Status of the Account's Email",
                    "type": "string",
                    "enum": [
                        "verified",
                        "notVerified"
                    ],
                    "default": "notVerified",
                    "propertyOrder": 80
                },
                "StatusConstant": {
                    "description": "Status of the Account",
                    "type": "string",
                    "enum": [
                        "registered",
                        "unregistered",
                        "needsManualVerification"
                    ],
                    "default": "registered",
                    "propertyOrder": 90
                },
                "CreatedAt": {
                    "description": "Profile's creation time",
                    "type": "string",
                    "format": "date-time",
                    "default": "now()",
                    "propertyOrder": 100
                }
            },
            "required": [
                "Password",
                "EmailAddress"
            ],
            "functions": {
                "One": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                },
                "Create": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                },
                "Update": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                },
                "Delete": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                }
            }
        },
        "Tweet": {
            "type": "object",
            "title": "Tweet",
            "description": "Tweet represents a post a user created",
            "generators": [
                {
                    "sql-definition": {
                        "roleName": "twitter_db_role",
                        "grants": [
                            "SELECT",
                            "INSERT",
                            "DELETE"
                        ],
                        "primaryKey": [
                            "Id"
                        ],
                        "uniqueKeys": [
                            [
                                "Id"
                            ],
                            [
                                "ProfileId",
                                "Body"
                            ]
                        ],
                        "databaseName": "twitter_db",
                        "schemaName": "tweet"
                    }
                }
            ],
            "properties": {
                "Id": {
                    "description": "The unique identifier for a Tweet",
                    "type": "number",
                    "format": "int64",
                    "propertyOrder": 10
                },
                "ProfileId": {
                    "description": "The unique identifier for a Account's Profile",
                    "type": "number",
                    "format": "int64",
                    "minimum": 1,
                    "propertyOrder": 20
                },
                "Body": {
                    "description": "Text of the Tweet",
                    "type": "string",
                    "minLength": 1,
                    "propertyOrder": 30
                },
                "Location": {
                    "description": "Location of the Tweet's origin",
                    "type": "string",
                    "propertyOrder": 40
                },
                "RetweetCount": {
                    "description": "Aggregated Count for re-tweets of a tweet",
                    "type": "number",
                    "format": "int32",
                    "propertyOrder": 50
                },
                "FavouritesCount": {
                    "description": "Aggregated Count for favourites of a tweet",
                    "type": "number",
                    "format": "int32",
                    "propertyOrder": 60
                },
                "PossiblySensitive": {
                    "description": "Mark tweet if it is possibly sensitive",
                    "type": "boolean",
                    "default": false,
                    "propertyOrder": 70
                },
                "CreatedAt": {
                    "description": "Tweet's creation time",
                    "type": "string",
                    "format": "date-time",
                    "default": "now()",
                    "propertyOrder": 80
                }
            },
            "required": [
                "Body",
                "ProfileId"
            ],
            "functions": {
                "One": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                },
                "Create": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                },
                "Delete": {
                    "type": "object",
                    "title": "One",
                    "properties": {
                        "incoming": {
                            "$ref": "#/definitions/Account"
                        },
                        "outgoing": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                }
            }
        }
    },
    "paths": {
        "/pet": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Add a new pet to the store",
                "description": "",
                "operationId": "addPet",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Pet object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "put": {
                "tags": [
                    "pet"
                ],
                "summary": "Update an existing pet",
                "description": "",
                "operationId": "updatePet",
                "consumes": [
                    "application/json",
                    "application/xml"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Pet object that needs to be added to the store",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    },
                    "405": {
                        "description": "Validation exception"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/findByStatus": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by status",
                "description": "Multiple status values can be provided with comma seperated strings",
                "operationId": "findPetsByStatus",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Status values that need to be considered for filter",
                        "required": true,
                        "type": "array",
                        "items": [
                            {
                                "type": "string",
                                "enum": [
                                    "available",
                                    "pending",
                                    "sold"
                                ],
                                "default": "available"
                            }
                        ],
                        "collectionFormat": "csv"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": [
                                {
                                    "$ref": "#/definitions/Account"
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid status value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/findByTags": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Finds Pets by tags",
                "description": "Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing.",
                "operationId": "findPetsByTags",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "tags",
                        "in": "query",
                        "description": "Tags to filter by",
                        "required": true,
                        "type": "array",
                        "items": [
                            {
                                "type": "string"
                            }
                        ],
                        "collectionFormat": "csv"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "array",
                            "items": [
                                {
                                    "$ref": "#/definitions/Account"
                                }
                            ]
                        }
                    },
                    "400": {
                        "description": "Invalid tag value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/{petId}": {
            "get": {
                "tags": [
                    "pet"
                ],
                "summary": "Find pet by ID",
                "description": "Returns a single pet",
                "operationId": "getPetById",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to return",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Pet not found"
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            },
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "Updates a pet in the store with form data",
                "description": "",
                "operationId": "updatePetWithForm",
                "consumes": [
                    "application/x-www-form-urlencoded"
                ],
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet that needs to be updated",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "name",
                        "in": "formData",
                        "description": "Updated name of the pet",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "status",
                        "in": "formData",
                        "description": "Updated status of the pet",
                        "required": false,
                        "type": "string"
                    }
                ],
                "responses": {
                    "405": {
                        "description": "Invalid input"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            },
            "delete": {
                "tags": [
                    "pet"
                ],
                "summary": "Deletes a pet",
                "description": "",
                "operationId": "deletePet",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "api_key",
                        "in": "header",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "Pet id to delete",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid pet value"
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/pet/{petId}/uploadImage": {
            "post": {
                "tags": [
                    "pet"
                ],
                "summary": "uploads an image",
                "description": "",
                "operationId": "uploadFile",
                "consumes": [
                    "multipart/form-data"
                ],
                "produces": [
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "petId",
                        "in": "path",
                        "description": "ID of pet to update",
                        "required": true,
                        "type": "integer",
                        "format": "int64"
                    },
                    {
                        "name": "additionalMetadata",
                        "in": "formData",
                        "description": "Additional data to pass to server",
                        "required": false,
                        "type": "string"
                    },
                    {
                        "name": "file",
                        "in": "formData",
                        "description": "file to upload",
                        "required": false,
                        "type": "file"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/ApiResponse"
                        }
                    }
                },
                "security": [
                    {
                        "petstore_auth": [
                            "write:pets",
                            "read:pets"
                        ]
                    }
                ]
            }
        },
        "/store/inventory": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Returns pet inventories by status",
                "description": "Returns a map of status codes to quantities",
                "operationId": "getInventory",
                "produces": [
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer",
                                "format": "int32"
                            }
                        }
                    }
                },
                "security": [
                    {
                        "api_key": []
                    }
                ]
            }
        },
        "/store/order": {
            "post": {
                "tags": [
                    "store"
                ],
                "summary": "Place an order for a pet",
                "description": "",
                "operationId": "placeOrder",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "order placed for purchasing the pet",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "Invalid Order"
                    }
                }
            }
        },
        "/store/order/{orderId}": {
            "get": {
                "tags": [
                    "store"
                ],
                "summary": "Find purchase order by ID",
                "description": "For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions",
                "operationId": "getOrderById",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of pet that needs to be fetched",
                        "required": true,
                        "type": "integer",
                        "maximum": 5,
                        "minimum": 1,
                        "format": "int64"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "store"
                ],
                "summary": "Delete purchase order by ID",
                "description": "For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors",
                "operationId": "deleteOrder",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "path",
                        "description": "ID of the order that needs to be deleted",
                        "required": true,
                        "type": "string",
                        "minimum": 1
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid ID supplied"
                    },
                    "404": {
                        "description": "Order not found"
                    }
                }
            }
        },
        "/user": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Create user",
                "description": "This can only be done by the logged in user.",
                "operationId": "createUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Created user object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/createWithArray": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithArrayInput",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": [
                                {
                                    "$ref": "#/definitions/Account"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/createWithList": {
            "post": {
                "tags": [
                    "user"
                ],
                "summary": "Creates list of users with given input array",
                "description": "",
                "operationId": "createUsersWithListInput",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "List of user object",
                        "required": true,
                        "schema": {
                            "type": "array",
                            "items": [
                                {
                                    "$ref": "#/definitions/Account"
                                }
                            ]
                        }
                    }
                ],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/login": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs user into the system",
                "description": "",
                "operationId": "loginUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "query",
                        "description": "The user name for login",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "name": "password",
                        "in": "query",
                        "description": "The password for login in clear text",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "type": "string"
                        },
                        "headers": {
                            "X-Rate-Limit": {
                                "type": "integer",
                                "format": "int32",
                                "description": "calls per hour allowed by the user"
                            },
                            "X-Expires-After": {
                                "type": "string",
                                "format": "date-time",
                                "description": "date in UTC when toekn expires"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid username/password supplied"
                    }
                }
            }
        },
        "/user/logout": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Logs out current logged in user session",
                "description": "",
                "operationId": "logoutUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [],
                "responses": {
                    "default": {
                        "description": "successful operation"
                    }
                }
            }
        },
        "/user/{username}": {
            "get": {
                "tags": [
                    "user"
                ],
                "summary": "Get user by user name",
                "description": "",
                "operationId": "getUserByName",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be fetched. Use user1 for testing. ",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful operation",
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    },
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "user"
                ],
                "summary": "Updated user",
                "description": "This can only be done by the logged in user.",
                "operationId": "updateUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "name that need to be deleted",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "Updated user object",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/Account"
                        }
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid user supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user"
                ],
                "summary": "Delete user",
                "description": "This can only be done by the logged in user.",
                "operationId": "deleteUser",
                "produces": [
                    "application/xml",
                    "application/json"
                ],
                "parameters": [
                    {
                        "name": "username",
                        "in": "path",
                        "description": "The name that needs to be deleted",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "400": {
                        "description": "Invalid username supplied"
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        }
    }
}
